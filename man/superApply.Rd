% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/superApply.R
\name{superApply}
\alias{superApply}
\title{Efficient parallel lapply using a SLURM cluster}
\usage{
superApply(x, FUN, ..., tasks = 1, workingDir = getwd(), packages = NULL,
  sources = NULL, extraBashLines = NULL, extraScriptLines = "",
  clean = T, partition = NULL, time = NULL, mem = NULL, proc = NULL,
  totalProc = NULL, nodes = NULL, email = NULL)
}
\arguments{
\item{x}{vector/list - FUN will be applied to the elements of this}

\item{FUN}{function - function to be applied to each element of x}

\item{...}{further arguments of FUN}

\item{tasks}{integer - number of individual parallel jobs to execute}

\item{workingDir}{string - path to folder that will contain all the temporary files needed for submission, execution, and compilation of inidivudal jobs}

\item{packages}{character vector - package names to be loaded in individual tasks}

\item{sources}{character vector - paths to R code to be loaded in individual tasks}

\item{extraBashLines}{character vector - each element will be added as a line to the inidividual task execution bash script before R gets executed. For instance, here you may want to load R if it is not in your system by default}

\item{extraScriptLines}{character vector - each element will be added as a line to the individual task execution R script before starting lapply}

\item{clean}{logical - if TRUE all files created in workingDir will be deleted}

\item{partition}{character - Partition to use. Equivalent to \code{--partition} of SLURM sbatch}

\item{time}{character - Time requested for job execution, one accepted format is "HH:MM:SS". Equivalent to \code{--time} of SLURM sbatch}

\item{mem}{character - Memory requested for job execution, one accepted format is "xG" or "xMB". Equivalent to \code{--mem} of SLURM sbatch}

\item{proc}{integer - Number of processors requested per task. Equivalent to \code{--cpus-per-task} of SLURM sbatch}

\item{totalProc}{integer - Number of tasks requested for job. Equivalent to \code{--ntasks} of SLURM sbatch}

\item{nodes}{integer - Number of nodes requested for job. Equivalent to \code{--nodes} of SLURM sbatch}

\item{email}{character - email address to send info when job is done. Equivalent to \code{--nodes} of SLURM sbatch}
}
\value{
list - results of FUN applied to each element in x
}
\description{
An easy-to-use form of lapply that emulates parallelization using a SLURM cluster.
}
\details{
Mimics the functionality of lapply but implemented
in a way that iterations can be submmitted as one or more individual
jobs to a SLURM cluster. 
Each job batch, err, out, and script files are stored in a temporary folder. Once
all jobs have been submmitted, the function waits for them to finish. When they
are done executing, all results from individual jobs will be compiled into a single list.
}
\examples{
\dontrun{
#------------------------
# Parallel execution of 100 function calls using 4 parellel tasks
myFun <- function(x) {
    #Sys.sleep(10)
    return(rep(x, 3))
}

dir.create("~/testSap")
sapOut <- superApply(1:100, FUN = myFun, tasks = 4, workingDir = "~/testSap", time = "60", mem = "1G")


#------------------------
# Parallel execution of 100 function calls using 100  parellel tasks
sapOut <- superApply(1:100, FUN = myFun, tasks = 100, workingDir = "~/testSap", time = "60", mem = "1G")


#------------------------
# Parallel execution where a package is required in function calls
myFun <- function(x) {
    return(ggplot(data.frame(x = 1:100, y = (1:100)*x), aes(x = x, y = y )) + geom_point() + ylim(0, 1e4))
}

dir.create("~/testSap")
sapOut <- superApply(1:100, FUN = myFun, tasks = 4, workingDir = "~/testSap", packages = "ggplot2",  time = "60", mem = "1G")


#------------------------
# Parallel execution where R has to be loaded in the system (e.g. in bash `module load R`)
sapOut <- superApply(1:100, FUN = myFun, tasks = 4, workingDir = "~/testSap", time = "60", mem = "1G", extraBashLines = "module load R")


#------------------------
# Parellel execution where a source is required in funciton calls
# Content of ./customRep.R
   customRep <- function(x) {
           return(paste("customFunction", rep(x, 3)))
   }
# Super appply execution 
myFun <- function(x) {
    return(customRep(x))
}

dir.create("~/testSap")
sapOut <- superApply(1:100, FUN = myFun, tasks = 4, sources = "./customRep.R", workingDir = "~/testSap", time = "60", mem = "1G")

}
}
